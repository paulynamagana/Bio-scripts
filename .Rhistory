# Check for other common missing names
sum(pdata$characteristics_ch1==" ")
# Check genomic data for NAs
sum(is.na(edata))
# Make the distribution of NA's by genes
gene_na = rowSums(is.na(edata))
kable(head(gene_na))
dim(fdata)
dim(pdata)
dim(edata)
## exprs get the expression levels as a data frame and get the distribution
kable(summary(exprs(gse)))
boxplot(edata,outline=FALSE)
##Let's pick just those columns that we might need for the analysis
sampleInfo <- select(pdata, 44,"characteristics_ch1.4")
## Optionally, rename to more convenient column names
sampleInfo <- dplyr::rename(sampleInfo, "group" = "histology:ch1", "patient"="characteristics_ch1.4")
paged_table(sampleInfo)
library(pheatmap)
## argument use="c" stops an error if there are any missing data points
corMatrix <- cor(exprs(gse),use="c")
pheatmap(corMatrix)
rownames(sampleInfo)
colnames(corMatrix)
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
plotMDS(gse, labels=sampleInfo[,"group"],
gene.selection="common")
#Plot principal components labeled by group
pca <- prcomp(t(edata))
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=group,label=paste("Patient", patient))) + geom_point() + geom_text_repel()
library(limma)
design <- model.matrix(~0+sampleInfo$group)
kable(head(design))
#rename
colnames(design) <- c("adenocarcinoma","non_malignant")
colSums(design)
contrasts <- makeContrasts(adenocarcinoma - non_malignant, levels=design)
contrasts
fit <- lmFit(exprs(gse), design)
head(fit$coefficients)
fit2 <- contrasts.fit(fit,contrasts = contrasts)
efit <- eBayes(fit2)
anno <- fdata
paged_table(anno)
anno <- select(anno,Symbol, Entrez_Gene_ID,Chromosome,Cytoband)
efit$genes <- anno
topTable(efit)
#visualise
plotSA(efit, main="Final model: Mean-variance trend")
topTable(efit)
results <- (decideTests(efit))
kable(summary(results))
tfit <- treat(efit, lfc=1)
dt <- decideTests(tfit)
summary(dt)
adeno_vs_non <- topTreat(tfit, coef=1, n=Inf)
head(adeno_vs_non)
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(2,16))
group=as.factor(sampleInfo$group)
##### GLIMMA ########3
#BiocManager::install("Glimma")
library(Glimma)
library(edgeR)
cpm <- cpm(edata)
lcpm <- cpm(edata, log=TRUE)
d <-glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="Entrez_Gene_ID", counts=edata, groups=group, path = "..", launch=TRUE)
d
library(htmlwidgets)
htmlwidgets::saveWidget(d, "glimma-plot.html", selfcontained = T)
library(rmarkdown) # paged table
library(GEOquery) #geo query access
library(knitr) #tables
library(dplyr)
library(devtools)
library(ggplot2)
library(limma)
library(edgeR)
library(ggrepel)
library(kableExtra)
library(tinytex)
Sys.setenv(VROOM_CONNECTION_SIZE = 25600000)
my_id <- "GSE75037"
gse <- getGEO(my_id)
gse <- gse[[1]]
gse
pdata= pData(gse) #sample information, pheno
edata= exprs(gse) #expression data
fdata = fData(gse) #gene annotation, features
dim(fdata)
#Dimension of edata
dim(pdata)
#Dimension of edata
dim(edata)
# Use option useNA to include NA's in table
kable(table(pdata$characteristics_ch1,useNA="ifany"), booktabs=TRUE) %>%
kable_styling(latex_options = "hold_position")
kable(table(pdata[43]), booktabs=T)%>%
kable_styling(latex_options= "hold_position")
kable(table(pdata$characteristics_ch1, pdata$characteristics_ch1.2), booktabs = T)%>%
kable_styling(latex_options = "hold_position")
boxplot(edata,outline=FALSE)
##Let's pick just those columns that we might need for the analysis
sampleInfo <- select(pdata, 44,"characteristics_ch1.4")
## Optionally, rename to more convenient column names
sampleInfo <- dplyr::rename(sampleInfo, "group" = "histology:ch1", "patient"="characteristics_ch1.4")
library(pheatmap)
corMatrix <- cor(exprs(gse),use="c")
pheatmap(corMatrix)
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
plotMDS(gse, labels=sampleInfo[,"group"],
gene.selection="common")
#Plot principal components labeled by group
pca <- prcomp(t(edata))
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=group,label=paste("Patient", patient))) + geom_point() + geom_text_repel()
design <- model.matrix(~0+sampleInfo$group)
colnames(design) <- c("adenocarcinoma","non_malignant") #rename columns
kable(head(design), booktabs=T)%>%
kable_styling(latex_options = "hold_position")
contrasts <- makeContrasts(adenocarcinoma - non_malignant, levels=design)
contrasts
fit <- lmFit(exprs(gse), design)
contrasts <- makeContrasts(adenocarcinoma - non_malignant, levels=design)
fit2 <- contrasts.fit(fit,contrasts)
efit <- eBayes(fit2) #apply empirical Bayes to get the differential expression statistics and p-values
kable(topTable(efit), booktabs=T)%>%
kable_styling(latex_options = "hold_position")
results <- (decideTests(efit))
kable(summary(results), booktabs=T)
anno <- fData(gse)
anno <- select(anno,Symbol, Entrez_Gene_ID,Chromosome,Cytoband)
efit$genes <- anno
kable(topTable(efit), booktabs=T)%>%
kable_styling(latex_options= c("scale_down", "hold_position"))
full_results <- topTable(efit, number=Inf)
full_results <- tibble::rownames_to_column(full_results, "ID")
ggplot(full_results, aes(x=logFC, y=B)) +
geom_point()
p_cutoff <- 0.05
fc_cutoff <- 1
topN <- 20
full_results %>%
mutate(Significant = adj.P.Val < p_cutoff, abs(logFC) > fc_cutoff) %>%
mutate(Rank= 1:n(), Label= ifelse(Rank < topN, Symbol, "")) %>%
ggplot(aes(x = logFC, y=B, col=Significant, label= Label)) +
geom_text_repel(col="black")
#visualise
plotSA(efit, main="Final model: Mean-variance trend")
kable(topTable(efit), booktabs=T)%>%
kable_styling(latex_options=c("scale_down", "hold_position"))
tfit <- treat(efit, lfc=1)
dt <- decideTests(tfit)
kable(summary(dt), booktabs=T)%>%
kable_styling(latex_options= "hold_position")
adeno_vs_non <- topTreat(tfit, coef=1, n=Inf)
kable(head(adeno_vs_non), booktabs=T) %>%
kable_styling(latex_options= c("scale_down", "hold_position"))
plotMD(tfit, column=1, status=dt[,1], main=colnames(tfit)[1],
xlim=c(2,16))
kable(filter(full_results, Symbol == "SLC22A1"), booktabs=T)%>%
kable_styling(latex_options=c("scale_down", "hold_position"))
kable(filter(full_results, Symbol == "SLC22A4"), booktabs=T)%>%
kable_styling(latex_options=c("scale_down", "hold_position"))
kable(filter(full_results, Symbol == "SLC22A5"), booktabs=T)%>%
kable_styling(latex_options=c("scale_down", "hold_position"))
kable(filter(full_results, grepl("SLC22", Symbol)), booktabs=T)%>%
kable_styling(latex_options=c("scale_down", "hold_position"))
group=as.factor(sampleInfo$group)
##### GLIMMA ########3
#BiocManager::install("Glimma")
library(Glimma)
library(edgeR)
cpm <- cpm(edata)
lcpm <- cpm(edata, log=TRUE)
d <-glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="Entrez_Gene_ID", counts=edata, groups=group, path = "..", launch=TRUE)
d
library(readr)
filter(full_results, adj.P.Val < 0.05, abs(logFC) >1) %>%
write.csv(file ="./results/filtered_GSE75037.csv")
sessionInfo()
library(htmlwidgets)
htmlwidgets::saveWidget(d, "GSE75037-plot.html", selfcontained = T)
library(htmlwidgets)
htmlwidgets::saveWidget(d, "gse75-plot.html", selfcontained = T)
saveWidget(d, "gse75-plot.html", selfcontained = T)
d <-glMDPlot(tfit, coef=1, status=dt, main=colnames(tfit)[1],
side.main="Entrez_Gene_ID", counts=edata, groups=group, path = ".",folder = "glimma-plots", html = "GSE75037-Plot", launch=TRUE)
source('~/Documents/Github/Bio-scripts/downloadproteinatlas.R', echo=TRUE)
setwd("~/Documents/Github/Bio-scripts")
write.csv(transporters, file = "./data/transportershumantlas.csv")
#plot
ggplot(transporters, aes(x=tissue, y=log10nTPM, fill=transporter))+
geom_bar(stat="identity", position="dodge") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text.x = element_text(angle=90))
pdf(file = "./PDFs_outcome/expression_proteinatlas.pdf",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 12)
p <- ggplot(transporters, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="white", high="black") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(transporters$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
dev.off()
###############paste all
#paste
transporters <- rbind(SLC22A1, SLC22A4, SLC22A5, SLC22A2, SLC22A3)
transporters$log10nTPM <- log10(transporters$nTPM+1)
write.csv(transporters, file = "./data/transportershumantlas.csv")
#plot
ggplot(transporters, aes(x=tissue, y=log10nTPM, fill=transporter))+
geom_bar(stat="identity", position="dodge") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text.x = element_text(angle=90))
pdf(file = "./PDFs_outcome/expression_proteinatlas.pdf",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 12)
p <- ggplot(transporters, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="white", high="black") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(transporters$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
dev.off()
p <- ggplot(transporters, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="pink", high="darkblue") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(transporters$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
dev.off()
###############paste all
#paste
transporters <- rbind(SLC22A1, SLC22A4, SLC22A5, SLC22A2, SLC22A3)
transporters$log10nTPM <- log10(transporters$nTPM+1)
write.csv(transporters, file = "./data/transportershumantlas.csv")
#plot
ggplot(transporters, aes(x=tissue, y=log10nTPM, fill=transporter))+
geom_bar(stat="identity", position="dodge") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text.x = element_text(angle=90))
pdf(file = "./PDFs_outcome/expression_proteinatlasOCTNS.pdf",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 12)
p <- ggplot(transporters, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="pink", high="darkblue") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(transporters$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
dev.off()
###############paste all
#paste
transporters <- rbind(SLC22A1, SLC22A4, SLC22A5, SLC22A2, SLC22A3)
transporters$log10nTPM <- log10(transporters$nTPM+1)
View(transporters)
write.csv(transporters, file = "./data/transportershumantlas.csv")
#plot
ggplot(transporters, aes(x=tissue, y=log10nTPM, fill=transporter))+
geom_bar(stat="identity", position="dodge") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text.x = element_text(angle=90))
pdf(file = "./PDFs_outcome/expression_proteinatlasOCTNS.pdf",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 12)
p <- ggplot(transporters, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="pink", high="darkblue") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(transporters$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
dev.off()
source('~/Documents/Github/Bio-scripts/downloadproteinatlas.R', echo=TRUE)
###############paste all
#paste
transporters <- rbind(SLC22A1, SLC22A4, SLC22A5, SLC22A2, SLC22A3, SLC22A7, SLC22A6)
transporters$log10nTPM <- log10(transporters$nTPM+1)
#################octs / OCTNS
include <- c("SLC22A1", "SLC22A4", "SLC22A5", "SLC22A2", "SLC22A3")
OCTS <- filter(transporters, transporter %in% include)
#################octs / OCTNS
include <- c("SLC22A1", "SLC22A4", "SLC22A5", "SLC22A2", "SLC22A3")
OCTS <- filter(transporters, transporter %in% include)
################# octs / OCTNS
target <- c("SLC22A1", "SLC22A4", "SLC22A5", "SLC22A2", "SLC22A3")
OCTS <- filter(transporters, transporter %in% target)
OCTS <- transporters$transporter %in% target)
OCTS <- transporters$transporter %in% target
################# octs / OCTNS
target <- c("SLC22A1", "SLC22A4", "SLC22A5", "SLC22A2", "SLC22A3")
OCTS <- transporters %>%
filter(transporter %in% target)
################# octs / OCTNS
library(dplyr)
target <- c("SLC22A1", "SLC22A4", "SLC22A5", "SLC22A2", "SLC22A3")
OCTS <- transporters %>%
filter(transporter %in% target)
View(OCTS)
target_tissue <- c("adipose tissue", "bone marrow", "colon", "breast", "cerebral cortex", "esophagus",
"heart muscle", "kidney", "liver", "lung", "ovary", "pancreas", "prostate",
"small intestine", "urinary bladder", "vagina", "white matter")
OCT_tissue <- OCTS %>%
filter(tissue %in% target_tissue)
#plot
ggplot(OCT_tissue, aes(x=tissue, y=log10nTPM, fill=transporter))+
geom_bar(stat="identity", position="dodge") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text.x = element_text(angle=90))
library(httr)
library(jsonlite)
library(dplyr)
library(tidyverse)
library(purrr)
library(ggplot2)
library(rmarkdown)
#plot
ggplot(OCT_tissue, aes(x=tissue, y=log10nTPM, fill=transporter))+
geom_bar(stat="identity", position="dodge") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.text.x = element_text(angle=90))
pdf(file = "./PDFs_outcome/expression_proteinatlasOCTNS.pdf",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 12)
p <- ggplot(OCT_tissue, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="pink", high="darkblue") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(OCT_tissue$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
dev.off()
p <- ggplot(OCT_tissue, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="blue", high="darkblue") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(OCT_tissue$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
p <- ggplot(OCT_tissue, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="grey", high="darkblue") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(OCT_tissue$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
p <- ggplot(OCT_tissue, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="pink", high="darkblue") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(OCT_tissue$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
pdf(file = "./PDFs_outcome/expression_proteinatlasOCTNS.pdf",   # The directory you want to save the file in
width = 8, # The width of the plot in inches
height = 12)
p <- ggplot(OCT_tissue, aes(y=tissue, x=transporter, fill=log10nTPM)) +
geom_tile() +
scale_fill_gradient(low="pink", high="darkblue") +
theme(strip.placement = "outside",
plot.title = element_text(hjust = 0.5)) +
ggtitle(label = "SLC22 Abundance expression in human") +
scale_y_discrete(limits = rev(levels(as.factor(OCT_tissue$tissue)))) +
labs(fill='log TPM')  +
theme_classic()
p
dev.off()
library(readr)
library(dplyr)
#IMPORT ALL SETS OF DATA, RENAME COLUMNS AND DROP FIRST COLUMN
SLC22A2 <- read_csv(".data/network/SLC22A2.csv") %>%
select(-"type")
#IMPORT ALL SETS OF DATA, RENAME COLUMNS AND DROP FIRST COLUMN
SLC22A2 <- read_csv("./data/network/SLC22A2.csv") %>%
select(-"type")
source('~/.active-rstudio-document', echo=TRUE)
#BIND ALL COLUMNS TOGETHER
total <- bind_rows(SLC22A1,SLC22A2,SLC22A3,SLC22A4,SLC22A5)
library(tidyverse)
#get distinct transporters
sources <- total %>%
distinct(transporter)%>%
rename(label=transporter)
#get distinct drug names
destinations <- total %>%
distinct(properties.generic.name)%>%
rename(label=properties.generic.name)
# Join the two data to create node
# Add unique ID for each country
nodes <- full_join(sources, destinations, by = "label")
nodes <- nodes %>%
mutate(id = 1:nrow(nodes)) %>%
select(id, everything())
head(nodes, 3)
nodes$group <- c(rep("A",12), rep("B",340))
View(nodes)
nodes$group <- c(rep("A",5), rep("B",174))
nodes$group <- c(rep("A",5), rep("B",173))
# Join the two data to create node
# Add unique ID for each country
nodes <- full_join(sources, destinations, by = "label")
nodes <- nodes %>%
mutate(id = 1:nrow(nodes)) %>%
select(id, everything())
head(nodes, 3)
nodes$group <- c(rep("A",5), rep("B",173))
View(nodes)
nodes$group <- c(rep("A",5), rep("B",150))
nodes$group <- c(rep("A",5), rep("B",174))
nodes$group <- c(rep("A",5), rep("B",170))
nodes$group <- c(rep("A",5), rep("B",169))
View(nodes)
per_route <- total %>%
group_by(transporter, properties.generic.name) %>%
summarise(weight = n()) %>%
ungroup()
#THIS FORMULA TURN COLUMNS INTO VARIABLES
set_lists_to_chars <- function(x) {
if(class(x) == 'list') {
y <- paste(unlist(x[1]), sep='', collapse=', ')
} else {
y <- x
}
return(y)
}
#CREATE A NEW DATA FRAME
total <- data.frame(lapply(per_route, set_lists_to_chars), stringsAsFactors = F)
# (a) Join nodes id for source column
edges <- total %>%
left_join(nodes,by = c("transporter"= "label")) %>%
rename(from=id)
# (b) Join nodes id for destination column
edges <- edges %>%
left_join(nodes, by = c("properties.generic.name" = "label")) %>%
rename(to=id)
edges <- select(edges,from,to,weight)
head(edges,3)
library(igraph)
#BUILD THE EDGEs AND VERTICES
net.igraph <- graph_from_data_frame(
d= edges, vertices= nodes,
directed= FALSE)
net.igraph
net.igraph[]
#SEE THE FIRST PLOT
plot(net.igraph,
vertex.label.family="Helvetica",
vertex.label.color="black",
edge.arrow.size=1,
edge.arrow.width=2,
vertex.label.cex=0.5,
remove.multiple = F, remove.loops = T)
#add a layout for it to stop moving everytime I run the code again
V(net.igraph)$size <- log(strength(net.igraph)) * 4 + 3
l= layout_with_fr(net.igraph)
par(mar=c(0,0,0,0)); plot(net.igraph,
vertex.label.family="Helvetica",
vertex.label.color="black",
vertex.color= "orange",
edge.arrow.size=1,
edge.arrow.width=2,
vertex.label.cex=0.5,
remove.multiple = F, remove.loops = T,
layout=l)
####spread the graph
l <- layout_with_fr(net.igraph)
####spread the graph
l <- layout_with_fr(net.igraph)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(net.igraph, rescale=F, layout=l*1.2)
